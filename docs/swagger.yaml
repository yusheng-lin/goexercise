definitions:
  enum.Sort:
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - ASC
    - Desc
  enum.UserSort:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-varnames:
    - Account
    - Fullname
    - CreatedAt
  models.Account:
    properties:
      acct:
        type: string
      fullname:
        type: string
      pwd:
        type: string
    type: object
  models.DeleteAccount:
    properties:
      acct:
        type: string
    type: object
  models.Login:
    properties:
      acct:
        example: ben
        type: string
      pwd:
        example: pass.123
        type: string
    type: object
  models.Paging:
    properties:
      pageno:
        example: 1
        type: integer
      sort:
        allOf:
        - $ref: '#/definitions/enum.Sort'
        description: 'enum: 0 asc, 1 desc'
        example: 0
      sortby:
        allOf:
        - $ref: '#/definitions/enum.UserSort'
        description: 'enum: 0 account, 1 fullname, 2 created'
        example: 0
      take:
        example: 50
        type: integer
    type: object
  models.Response:
    properties:
      data: {}
      msg:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Gin swagger
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Gin swagger
  version: "1.0"
paths:
  /Login:
    post:
      parameters:
      - description: login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: uers login
      tags:
      - user
  /SignUp:
    post:
      parameters:
      - description: singup
        in: body
        name: singup
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: uers sign up
      tags:
      - user
  /user:
    delete:
      parameters:
      - description: acct
        in: body
        name: acct
        required: true
        schema:
          $ref: '#/definitions/models.DeleteAccount'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: delete account
      tags:
      - user
    post:
      parameters:
      - description: page
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/models.Paging'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: list users
      tags:
      - user
    put:
      parameters:
      - description: acct
        in: body
        name: acct
        required: true
        schema:
          $ref: '#/definitions/models.Account'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: update account
      tags:
      - user
  /user/{name}:
    get:
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: get user by name
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
